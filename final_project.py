# -*- coding: utf-8 -*-
"""Final Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10zhQPT1fg4tUeMaCOJQiCAnnE-YRLAdl

**Importing Necessary Functions**
"""

#Importing necessary packages to run code
import folium

import pandas as pd
!pip install geopandas
import geopandas as gpd
import json

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import folium
from folium.plugins import MarkerCluster

"""**Pulling in data from Google colab**"""

# Read in data
data = pd.read_csv("earthquakes2.csv")

# Cheeck first few lines using the head() function to make sure everything reads in
data.head()

# Check data types
data.dtypes

# checking to make sure all columns made it
data.columns

# checking how many unique values or earthquakes each state has
print(data['STATE'].unique())
print("--------------------")
print(data['STATE'].value_counts())

lat=list(data["CITY_LAT"])
long=list(data["CITY_LON"])
state=list(data["STATE"])
year=list(data["YEAR"])
mag=list(data["MAGNITUDE"])
city=list(data["CITY"])

map = folium.Map(location=[48,-102], zoom_start=5, tiles="OpenStreetMap")

def color_producer(state):
  if state == "CA":
    return "lightseagreen"
  else:
    return "lightseagreen"

html = """<h4>Earthquakes </h4>

      <strong>Latitude: </strong>%s <br>
      <strong>Longitude: </strong>%s <br>
<strong>State: </strong>%s <br>
<strong>Year: </strong>%s <br>
<strong>Magnitude: </strong>%s <br>
<strong>City: </strong>%s <br>

"""

"""**Let's see the map!**"""

tile2 = folium.TileLayer('Mapbox Bright')

map.add_child(tile2)

fgi = folium.FeatureGroup(name="Earthquake")

for lt, ln, state_1,lo,me,to in zip(lat, long,state,year,mag,city):

    iframe = folium.IFrame(html=html %(str(lt),str(ln),str(state_1),str(lo),str(me),str(to)), width=200,height=300)

    fgi.add_child(folium.CircleMarker(location=[lt, ln], radius = 6, popup=folium.Popup(iframe),

    fill_color=color_producer(state), fill=True,  color = 'grey', fill_opacity=0.7))

map.add_child(fgi)
map.add_child(folium.LayerControl())

map.save("Map1.html")

# Creating a more organizing map using clusters

m = folium.Map(location=[40, -100], zoom_start=5)

locations = list(zip(data.CITY_LAT, data.CITY_LON))
icons = [folium.Icon(icon="circle", prefix="fa") for _ in range(len(locations))]

popups = []
for lt, ln, state_1,lo,me,to in zip(lat, long,state,year,mag,city):
    iframe = folium.IFrame(html=html %(str(lt),str(ln),str(state_1),str(lo),str(me),str(to)), width=200,height=300)
    popups.append(folium.Popup(iframe))

cluster = MarkerCluster(locations=locations, icons=icons, popups=popups)
m.add_child(cluster)
m

Earthquakes = gpd.read_file("earthquakes2.csv")

# Creating a dataframe of my data
df = pd.DataFrame(Earthquakes, columns = ['YEAR','CITY_LAT','CITY_LON','MAGNITUDE','MMI','STATE','CITY'])

"""**Let's create a heat map of the data**"""

from folium import plugins
from folium.plugins import HeatMap


map1 = folium.Map(location=[40, -100],
                    zoom_start = 5) 

# Ensure you're handing it floats
df['CITY_LAT'] = df['CITY_LAT'].astype(float)
df['CITY_LON'] = df['CITY_LON'].astype(float)

# Filter the DF for rows, then columns, then remove NaNs
heat_df = df[df['MAGNITUDE']=='5'] 
heat_df = df[df['YEAR']=='1980'] 
heat_df = df[['CITY_LAT', 'CITY_LON']]
heat_df = heat_df.dropna(axis=0, subset=['CITY_LAT','CITY_LON'])

# List comprehension to make out list of lists
heat_data = [[row['CITY_LAT'],row['CITY_LON']] for index, row in heat_df.iterrows()]

# Plot it on the map
HeatMap(heat_data).add_to(map1)

# Display the map
map1